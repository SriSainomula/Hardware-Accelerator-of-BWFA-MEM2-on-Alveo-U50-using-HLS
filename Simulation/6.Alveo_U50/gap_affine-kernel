#include <ap_int.h>
#include <hls_stream.h>
#include <string.h>
#include <stdio.h>

#define MAX_SEQ_LEN 128

void needleman_wunsch_scoring(
    char *seq1, char *seq2,
    int len1, int len2,
    int gap_penalty, int gap_extend, int match_score, int mismatch_penalty,
    int *prev_D
) {
    //#pragma HLS inline off
    #pragma HLS PIPELINE II=1

    //printf("Entered NW-Scoring function:\n");
    //printf("Length of Seq1: %d \n",len1);
    //printf("Length of Seq2: %d \n",len2);
    // printf("Sub_Seq-1: ");
    // for(int i=0;i<len1;i++){
    //     printf("%c",seq1[i]);
    // }

    // printf(",Sub_Seq-2: ");
    // for(int i=0;i<len2;i++){
    //     printf("%c",seq2[i]);
    // }

    // printf("\n");

    int prev_P[MAX_SEQ_LEN + 1],prev_Q[MAX_SEQ_LEN + 1];
    int curr_D[MAX_SEQ_LEN + 1],curr_P[MAX_SEQ_LEN + 1],curr_Q[MAX_SEQ_LEN + 1];

    prev_D[0] = 0;
    prev_P[0] = 0;
    prev_Q[0] = 0;
    curr_D[0] = 0;
    curr_P[0] = 0;
    curr_Q[0] = 0;
    for (int j = 1; j <= len1; ++j) {
        prev_P[j] = -1000;
        prev_Q[j] = -1000;
        prev_D[j] = gap_penalty + j * gap_extend;
    }

    for (int i = 1; i <= len2; ++i) {
        curr_P[0] = -1000;
        curr_Q[0] = -1000;
        curr_D[0] = gap_penalty + i * gap_extend;
        //printf("%d ",new_score[0]);
        for (int j = 1; j <= len1; ++j) {
            int match_or_mismatch = (seq1[j - 1] == seq2[i - 1]) ? match_score : mismatch_penalty;
            //For Insertion Matrix
            curr_P[j] = curr_P[j - 1] + gap_extend > curr_D[j - 1] + gap_penalty + gap_extend ? curr_P[j - 1] + gap_extend : curr_D[j - 1] + gap_penalty + gap_extend;
            //For Deletion Matrix
            curr_Q[j] = prev_Q[j] + gap_extend > prev_D[j] + gap_penalty + gap_extend ? prev_Q[j] + gap_extend : prev_D[j] + gap_penalty + gap_extend;
            //For Best Score
            int temp1 = curr_P[j] > curr_Q[j] ? curr_P[j] : curr_Q[j];
            curr_D[j] = prev_D[j - 1] + match_or_mismatch > temp1 ? prev_D[j - 1] + match_or_mismatch : temp1;

        }
        //printf("\n");
        for (int j = 0; j <= len1; ++j) {
            int temp_P = prev_P[j];
            int temp_Q = prev_Q[j];
            int temp_D = prev_D[j];
            prev_P[j] = curr_P[j];
            curr_P[j] = temp_P;
            prev_Q[j] = curr_Q[j];
            curr_Q[j] = temp_Q;
            prev_D[j] = curr_D[j];
            curr_D[j] = temp_D;
        }
    }
}

void bwfa_alignment(
    char *seq1, char *seq2,
    int len1, int len2,
    int gap_penalty, int gap_extend, int match_score, int mismatch_penalty,
    char *aligned_seq1, char *aligned_seq2
) {
    #pragma HLS PIPELINE II=1

    //printf("Entered bwfa_alignment function:\n");
    struct Subproblem {
        int start1, end1, start2, end2;
    };

    Subproblem stack[MAX_SEQ_LEN];
    int stack_ptr = 0;
    stack[stack_ptr++] = {0, len1, 0, len2};

    int align_index1 = 0;
    int align_index2 = 0;
    memset(aligned_seq1, 0, MAX_SEQ_LEN * 2);
    memset(aligned_seq2, 0, MAX_SEQ_LEN * 2);

    while (stack_ptr > 0) {
        Subproblem sub = stack[--stack_ptr];

        int len1_sub = sub.end1 - sub.start1;
        int len2_sub = sub.end2 - sub.start2;

        char pre_seq1[MAX_SEQ_LEN],pre_seq2[MAX_SEQ_LEN];

        //Printing the Sequences
        printf("Seq-1: ");
        for(int i=sub.start1 ; i<sub.end1;i++){
            printf("%c",seq1[i]);
        }
        printf(",");

        printf("Seq-2: ");
        for(int i=sub.start2 ; i<sub.end2;i++){
            printf("%c",seq2[i]);
        }

        printf("\n");

        if(len1_sub == 0){
        	for(int i=sub.start2;i<sub.end2;i++){
        		aligned_seq1[align_index1++] = '-';
                aligned_seq2[align_index2++] = seq2[i];
        	}
            continue;
        }

        if(len2_sub == 0){
        	for(int i=sub.start1;i<sub.end1;i++){
        		aligned_seq1[align_index1++] = seq1[i];
        		aligned_seq2[align_index2++] = '-';
        	}
            continue;
        }


        if (len1_sub == 1 || len2_sub == 1) {
            int dp[MAX_SEQ_LEN + 1][MAX_SEQ_LEN + 1];
            // Fill the dynamic programming table
            dp[0][0] = 0;
            for (int i = 1; i <= len1_sub; ++i) dp[i][0] = gap_penalty + i * gap_extend;
            for (int j = 1; j <= len2_sub; ++j) dp[0][j] = gap_penalty + j * gap_extend;

            for (int i = 1; i <= len1_sub; ++i) {
            	for (int j = 1; j <= len2_sub; ++j) {
                	int match_or_mismatch = (seq1[sub.start1 + i - 1] == seq2[sub.start2 + j - 1]) ? match_score : mismatch_penalty;
                	int temp1 = dp[i - 1][j] + gap_extend > dp[i][j - 1] + gap_extend ? dp[i - 1][j] + gap_extend : dp[i][j - 1] + gap_extend;
                	dp[i][j] = dp[i - 1][j - 1] + match_or_mismatch > temp1 ? dp[i - 1][j - 1] + match_or_mismatch : temp1;
            	}
            }

            //Backtrack to get the optimal alignment
            int i = len1_sub;
    	    int j = len2_sub;
    	    int index = 0;
    	    // Temporary arrays to hold the alignment in reverse order
    	    char temp1[MAX_SEQ_LEN];
    	    char temp2[MAX_SEQ_LEN];

    	    // Main traceback loop
    	    TRACEBACK_LOOP: while (i > 0 && j > 0) {
        	    #pragma HLS loop_tripcount min=1 max=MAX_SEQ_LEN
        	    char a = seq1[sub.start1 + i - 1];
        	    char b = seq2[sub.start2 + j - 1];
        	    int score = (a == b) ? match_score : mismatch_penalty;

        	    if (dp[i][j] == dp[i - 1][j - 1] + score) {
            		temp1[index] = a;
            		temp2[index] = b;
            		--i;
           	 	    --j;
        	    } else if (dp[i][j] == dp[i - 1][j] + gap_extend) {
            		temp1[index] = a;
           	 	    temp2[index] = '-';
           	 	    --i;
        	    } else {
            		temp1[index] = '-';
            		temp2[index] = b;
            		--j;
        	    }
        	    index++;
    	    }

    	    // Process any remaining parts of seq1
    	    REMAINING_I: while (i > 0) {
       		    #pragma HLS loop_tripcount min=1 max=MAX_SEQ_LEN
        	    temp1[index] = seq1[sub.start1 + i - 1];
        	    temp2[index] = '-';
        	    --i;
        	    index++;
    	    }
    	    // Process any remaining parts of seq2
    	    REMAINING_J: while (j > 0) {
        	    #pragma HLS loop_tripcount min=1 max=MAX_SEQ_LEN
        	    temp1[index] = '-';
        	    temp2[index] = seq2[sub.start2 + j - 1];
        	    --j;
        	    index++;
    	    }

    	    // Reverse the temporary arrays to obtain the final aligned sequences
    	    int len = index;
    	    REVERSE_LOOP: for (int k = 0; k < len; k++) {
        	    #pragma HLS loop_tripcount min=1 max=MAX_SEQ_LEN
        	    aligned_seq1[align_index1 + k] = temp1[len - k - 1];
        	    aligned_seq2[align_index2 + k] = temp2[len - k - 1];
    		}

    		align_index1 = align_index1 + len;
    		align_index2 = align_index2 + len;
            continue;;
        }

        int mid = (len2_sub) / 2;

        printf("Mid: %d \n",mid);

        int score1[MAX_SEQ_LEN + 1], score2[MAX_SEQ_LEN + 1];
        #pragma HLS ARRAY_PARTITION variable=score1 cyclic factor=4
        #pragma HLS ARRAY_PARTITION variable=score2 cyclic factor=4

        //printf("Scoring-1: \n");

        //char sub_seq2[MAX_SEQ_LEN];
        //int j1=0;
        //for (j1 = 0; j1 < mid; j1++) sub_seq2[j1] = pre_seq2[j1];
        //sub_seq2[j1] = '\0';

        needleman_wunsch_scoring(seq1 + sub.start1, seq2 + sub.start2, len1_sub, mid, gap_penalty, gap_extend, match_score, mismatch_penalty, score1);

        char rev_seq1[MAX_SEQ_LEN], rev_seq2[MAX_SEQ_LEN];
        int i=0;
        int j=0;
        for (i = 0; i < len1_sub; i++) rev_seq1[i] = seq1[sub.end1 - 1 - i];
        for (j = 0; j < mid; j++) rev_seq2[j] = seq2[sub.end2 - 1 - j];
        rev_seq1[i] = '\0';
        rev_seq2[j] = '\0';
        //printf("Reversed Seq1: %s \n",rev_seq1);
        //printf("Reversed Seq2: %s \n",rev_seq2);

        //printf("Scoring-2: \n");
        needleman_wunsch_scoring(rev_seq1, rev_seq2, len1_sub, len2_sub - mid, gap_penalty, gap_extend, match_score, mismatch_penalty, score2);

        int best_split = 0;
        int best_score = score1[0] + score2[len1_sub];

        for (int i = 1; i <= len1_sub; ++i) {
            int split_score = score1[i] + score2[len1_sub - i];
            if (split_score >= best_score) {
                best_score = split_score;
                best_split = i;
            }
        }

        printf("Best Score = %d , ",best_score);
        printf("Split = %d \n",best_split);

        //printf("start1 = %d,",sub.start1);
        //printf("end1 = %d,",sub.end1);
        //printf("start2 = %d,",sub.start2);
        //printf("end2 = %d \n",sub.end2);

        //stack[stack_ptr++] = {sub.end1 - mid, sub.end1, best_split + sub.start2, sub.end2};
        //stack[stack_ptr++] = {sub.start1, sub.end1 - mid, sub.start2, best_split + sub.start2};

        stack[stack_ptr++] = {sub.start1 + best_split, sub.end1, sub.end2 - mid, sub.end2};
        stack[stack_ptr++] = {sub.start1, sub.start1 + best_split, sub.start2, sub.end2 - mid};

    }

    aligned_seq1[align_index1] = '\0';
    aligned_seq2[align_index2] = '\0';
}

extern "C" void top(
    char *seq1, char *seq2,
    int len1, int len2,
    int gap_penalty, int gap_extend, int match_score, int mismatch_penalty,
    char *aligned_seq1, char *aligned_seq2
) {
    #pragma HLS INTERFACE m_axi port=seq1 bundle=gmem
    #pragma HLS INTERFACE m_axi port=seq2 bundle=gmem
    #pragma HLS INTERFACE m_axi port=aligned_seq1 bundle=gmem
    #pragma HLS INTERFACE m_axi port=aligned_seq2 bundle=gmem
    #pragma HLS INTERFACE s_axilite port=len1
    #pragma HLS INTERFACE s_axilite port=len2
    #pragma HLS INTERFACE s_axilite port=gap_penalty
    #pragma HLS INTERFACE s_axilite port=gap_extend
    #pragma HLS INTERFACE s_axilite port=match_score
    #pragma HLS INTERFACE s_axilite port=mismatch_penalty
    #pragma HLS INTERFACE s_axilite port=return

    //printf("Entered top function:\n");
    bwfa_alignment(seq1, seq2, len1, len2, gap_penalty, gap_extend, match_score, mismatch_penalty, aligned_seq1, aligned_seq2);
}

